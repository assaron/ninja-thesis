Инструменты для реализации
--------------------------

TODO это не так важно, надо отметить

Для реализации данной идеи необходимо было использовать ЯП, позволяющий, главное, работать
со структорой файловой системы, умеющий вызывать другие программы
и обрабатывать их результаты. Изначально для разработки был выбран язык `Rust`.
Он превосходно подходит для такой задачи, тк изначально позиционировался как ЯП
для разработки системных приложений. Так же он имеет строгую систему типизации,
что позволяет избежать многих ошибок. Он компилируется в нативный код, что не сказывается на
его быстродействии.
Но он нахходится в стадии активной разработки, не имея стабильной версии. По этому причине
разработчики часто вносят необратимые изменения в язык. По этой причине от этого инструменты отказались.

Далее рассматривались такие ЯП как `C++` и `Java`. Но второй язык не самый лучший интрумент,
а для первого у меня было мало навыков, то решено было использовать язык `Haskell`.

Данный язык программирования является высокоуровневым функциональным языком.

Его преимущества:

* Строго типизирован.
* Компилируется в нативный код.
* Позволяет работать в операционной системе Linux.
* Широко распространен.
* Требует меньшего написания кода для выполнения тех же вещей (если сравнивать с `C++`, например).
